#!/usr/bin/env python3
import urllib.request
#import re
import os
import sys
import argparse
import json
import datetime
import time
from influxdb import InfluxDBClient
from multiprocessing.dummy import Pool

temps={}
stations={}
errors=0

# set directory to user's home (should work for Linux, Mac and Windows)
owd = os.getcwd()
os.chdir(os.path.expanduser("~"))

# command line options and help
parser = argparse.ArgumentParser()
parser.add_argument("--influx", nargs='+', help="influx server, port, user and password")
parser.add_argument("--read", nargs='+', help="Import stations from json file")
parser.add_argument("--key", nargs='+', help="add an api key, see https://openweathermap.org/api")
args = parser.parse_args()

if args.influx:
	if len(args.influx)!=4:
		print('The influxdb server, port #, user and password are required with --influx')
		sys.exit(1)

if args.read:
	if len(args.read)!=1:
		print('a filename is required with --read')
		sys.exit(1)

if args.key:
	if len(args.key)!=1:
		print('an api key is required with --key')
		sys.exit(1)
	else:
		apikey=str(args.key[0])
		print("Testing key " + apikey)
		url = "http://api.openweathermap.org/data/2.5/weather?id="+'707860'+"&appid="+apikey
		u = urllib.request.urlopen(url)
		k = u.read()
		print(len(k))
		if len(k) > 10:
			print("passed")
			file = open(".global-temp.key","w")
			file.write(apikey)
			file.close()
		else:
			print("failed, please get a valid key from https://www.alphavantage.co/support/#api-key")
		sys.exit(1)

if os.path.exists(".global-temp.key")==False:
	print("Please add a valid key")
	sys.exit(1)
else:
	file = open(".global-temp.key","r")
	apikey = file.read()
	file.close()
	os.chdir(owd)

def gettemp(id):
	location=str(id)
	url = "http://api.openweathermap.org/data/2.5/weather?id="+location+"&appid="+apikey
	try:
		f = urllib.request.urlopen(url)
		r = f.read()
		while len(r) < 400:
			time.sleep(1)
			f = urllib.request.urlopen(priceurl)
			r = f.read()
		r = (r.decode("utf-8").strip())
		r = r.split('"temp"', 1)[1]
		r = r.split(',', 1)[0]
		r = r.split(':', 1)[1]
		temps.update({float(r):location})
		print(location)
	except urllib.error.URLError as e:
		errors=+1
#		print(location)
		print('http timeout ' + str(errors) + ' errors')
		return

if args.read:
	a=(args.read[0])
#	print(a)
	with open(a, mode='r') as f:
		json_data = json.load(f)
	for json_dict in json_data:
		s=(json_dict['name'])
		i=(json_dict['id'])
		stations.update({s:i})

# find station name by id
def getstation(id):
	id=int(id)
	return(list(stations.keys())[list(stations.values()).index(id)])


if args.influx:
	server=str(args.influx[0])
	port=int(args.influx[1])
	user=str(args.influx[2])
	password=str(args.influx[3])
	metric = "temp"
	database = "global_temp"
	series = []

	pool = Pool(1024)
	pool.map(gettemp, stations.values())
	print(temps)
	ave=(sum(temps)/len(temps)-273.15)
	print(ave)
	hottest = str(getstation(max(temps.values())))
	print(hottest)
	high = (max(temps)-273.15)
	print(high)
	coldest = str(getstation(min(temps.values())))
	print(coldest)
	low = (min(temps)-273.15)
	print(low)
	pointValues = {
		"time": datetime.datetime.today(),
       	        "measurement": metric,
       	        'fields':  {
			'average_temp': ave,
			'lowest_temp': low,
			'highest_temp' : high,
       	        },
        	'tags': {
			"Hottest place": hottest,
			"Coldest place": coldest,
       	        },
       	    }
	print(pointValues)
	series.append(pointValues)
	client = InfluxDBClient(server, port, user, password, database)
	client.create_database(database)
	client.write_points(series)
	sys.exit(1)

print(str(len(stations)) + ' stations')
pool = Pool(1024)
#pool.map(getstation, stations.values())
pool.map(gettemp, stations.values())
#print(stations.values())

#for key in sorted(stations.keys()):
#	value=str(stations[key])
#	gettemp(key, value)
#	time.sleep(1)

print()
average_kelvin=(sum(temps)/len(temps))
average_celsius=((average_kelvin)-273.15)
average_fahrenheit=(((average_celsius)*1.8)+32)
print(str(datetime.datetime.now()))
print("Global average = " + str(round(average_kelvin,4)) + " kelvin, " + str(round(average_celsius,4)) + " celsius, " + str(round(average_fahrenheit,4)) + " fahrenheit")
print()
print(stations)
print(temps)

print("Hottest place is " + str(getstation(max(temps.values()))) + " at " + str(round(max(temps)-273.15,4)) + " celsius")
print("Coldest place is " + str(getstation(min(temps.values()))) + " at " + str(round(min(temps)-273.15,4)) + " celsius")

# ToDo
# create influx update function

